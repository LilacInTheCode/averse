#! /usr/bin/env python3

# Not essential (PyCharm complains without file access specifying SupportsRead/Write
from typing import TYPE_CHECKING
if TYPE_CHECKING: from _typeshed import SupportsWrite, SupportsRead

# Import functions from json, random, and os packages
from json import dump, load
from random import randint
import os


# Surveyor utility class that walks the spreadsheet or retrieves
# the cached .json file
class Surveyor(object):
    def __init__(self):
        # Collection of surveyed books
        self.survey_books: dict[str, dict] = {}

        # Remember current state between calls
        self.current_book: str = "none"
        self.current_chapter: str = "none"
        # Chapter buffer
        self.accumulated_chapters: dict[str, int] = {}
        # Verse buffer
        self.accumulated_verses: int = 0

        # Constants
        self.SRC_FILENAME: str = 'kjv.tsv'
        self.SURVEY_FILENAME: str = 'survey.json'
        self.NOSURVEY_MSG: str = "Missing survey file and cannot find source. Ensure kjv.tsv is in the same directory."

        # Setup     v Try to find cache file
        self.search_survey()   # v Survey cache was not found
        if self.survey_books is None:
            self.perform_survey()  # < Go through the spreadsheet and generate the cache

        # Survey was not able to generate cache
        if len(self.survey_books.keys()) == 0:
            print(self.NOSURVEY_MSG)

    def search_survey(self):
        try:
            with open(self.SURVEY_FILENAME, 'r') as survey_file:  # type: SupportsRead[str]
                self.survey_books = load(survey_file)
        except FileNotFoundError:
            self.survey_books = None

    def perform_survey(self):
        try:
            # Clear the cache
            self.survey_books = {}
            # Attempt to open the spreadsheet file and read lines in
            with open(self.SRC_FILENAME) as text_file:
                for line in text_file:
                    self.line_survey(line)

            # Run one more line to cache the final chapter of the last book
            self.line_survey("none\tnone\t0\t0\t0")

            # Store cache in a .json file
            self.cache_survey()

        except FileNotFoundError:
            print(self.NOSURVEY_MSG)
            exit(10000)

    # Take in a line of the spreadsheet to slot into the right spot
    def line_survey(self, line_in: str):
        # Index aliases
        book = 1
        bk_no = 2
        ch = 3

        # Tokenize input
        cols = line_in.split("\t")

        if self.current_book == "none":  # then this is our first run or our last
            if self.current_chapter == "none": # First run
                self.current_book = cols[book]
                self.current_chapter = cols[ch]
                self.accumulated_verses = 1
                return
            else: # Last run
                self.accumulated_chapters[self.current_chapter] = self.accumulated_verses
                self.survey_books[self.current_book] = self.accumulated_chapters.copy()
                self.accumulated_chapters.clear()

                self.accumulated_verses = 1
                self.current_chapter = "none"
                return

        # If the book number (3rd col) is past the canon
        if int(cols[bk_no]) > 66:
            return  # ignore apocrypha

        # About to start a new book
        if cols[book] != self.current_book:
            # Store the last chapter of the previous book
            self.accumulated_chapters[self.current_chapter] = self.accumulated_verses
            # Store the accumulated chapters of the previous book and prepare for this one
            self.survey_books[self.current_book] = self.accumulated_chapters.copy()
            self.accumulated_chapters.clear()
            self.current_chapter = "1"
            self.accumulated_verses = 0
            # Switch to this book
            self.current_book = cols[book]

        # Starting a new chapter
        if self.current_chapter != cols[ch]:
            # Store the previous chapter and prepare for this one
            self.accumulated_chapters[self.current_chapter] = self.accumulated_verses
            self.accumulated_verses = 0
            # Switch to this chapter
            self.current_chapter = cols[3]

        # Every line is a verse
        self.accumulated_verses += 1

    def cache_survey(self):
        try:
            # Open the survey file and write the spreadsheet survey to it
            with open('survey.json', 'w') as fp:  # type: SupportsWrite[str]
                dump(self.survey_books, fp)
        except IOError:
            # If it fails, don't worry about it
            pass

    def book_range(self) -> int:
        return len(self.survey_books.keys())

    def chapter_range(self, book: str) -> int:
        return len(self.survey_books.get(book))

    def verse_range(self, book: str, chapter: str) -> int:
        return self.survey_books.get(book).get(chapter)


try:
    # Spin up a surveyor (which does the cache retrieval or cache generation in the constructor)
    surveyor = Surveyor()
    # Select a book at random and get its abbreviation
    book_no: int = randint(1, surveyor.book_range())
    book_abv: str = list(surveyor.survey_books)[book_no]
    # Select a verse at random from that book
    chapter_no: int = randint(1, surveyor.chapter_range(book_abv))
    # Find out how many verses that chapter has and pick one at random
    last_verse: int = surveyor.verse_range(book_abv, str(chapter_no))
    verse_no: int = randint(1, last_verse)

    # Build a query for kjv to reference
    query: str = str.lower(book_abv) + " " + str(chapter_no) + ":" + str(verse_no)
    # Call kjv script with the formulated query
    os.system("kjv " + query)

except KeyboardInterrupt:
    print("\b\b  ")
    # Any keyboard interrupt actions go here (Ending the program at the CLI with Ctrl+C)

exit(0)
